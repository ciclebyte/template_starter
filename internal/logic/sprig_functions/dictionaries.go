package sprig_functions

import "github.com/ciclebyte/template_starter/internal/model"

// buildDictionariesFunctions 构建字典函数分类
func (s *sSprigFunctions) buildDictionariesFunctions() model.SprigFunctionCategory {
	return model.SprigFunctionCategory{
		Name:        "字典函数",
		Description: "字典（键值对）操作和处理函数",
		Functions: []model.SprigFunction{
			{
				Name:        "dict",
				DisplayName: "创建字典",
				Description: "创建一个键值对字典",
				Params: []model.SprigFunctionParam{
					{Name: "pairs", Type: "...any", Required: false, Description: "键值对列表（key1, value1, key2, value2, ...)"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ $myDict := dict "name1" "value1" "name2" "value2" }}`,
				Usage:      "dict 函数通过传入键值对列表创建字典。字典的键必须是字符串，但值可以是任何类型。与列表不同，字典是可变的。",
				InsertText: `{{ dict "key1" "value1" "key2" "value2" }}`,
				Note:       "键必须是字符串，值可以是任何类型。字典是无序且可变的",
			},
			{
				Name:        "get",
				DisplayName: "获取值",
				Description: "从字典中根据键获取值",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
					{Name: "key", Type: "string", Required: true, Description: "键"},
				},
				ReturnType: "any",
				Category:   "字典函数",
				Example:    `{{ get $myDict "name1" }}`,
				Usage:      "get 函数从字典中根据键获取值。如果键不存在，将返回空字符串，不会产生错误。",
				InsertText: `{{ get . "key" }}`,
				Note:       "键不存在时返回空字符串，不产生错误",
			},
			{
				Name:        "set",
				DisplayName: "设置值",
				Description: "向字典添加新的键值对",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
					{Name: "key", Type: "string", Required: true, Description: "键"},
					{Name: "value", Type: "any", Required: true, Description: "值"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ $_ := set $myDict "name4" "value4" }}`,
				Usage:      "set 函数向字典添加新的键值对。注意 set 返回字典本身（Go模板函数的要求），所以可能需要用 $_ 赋值来捕获返回值。",
				InsertText: `{{ $_ := set . "key" "value" }}`,
				Note:       "返回字典本身，通常用 $_ 赋值捕获",
			},
			{
				Name:        "unset",
				DisplayName: "删除键",
				Description: "从字典中删除指定的键",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
					{Name: "key", Type: "string", Required: true, Description: "要删除的键"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ $_ := unset $myDict "name4" }}`,
				Usage:      "unset 函数从字典中删除指定的键。与 set 类似，返回字典本身。如果键不存在，操作会正常返回，不产生错误。",
				InsertText: `{{ $_ := unset . "key" }}`,
				Note:       "返回字典本身，键不存在时不产生错误",
			},
			{
				Name:        "hasKey",
				DisplayName: "检查键存在",
				Description: "检查字典是否包含指定的键",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
					{Name: "key", Type: "string", Required: true, Description: "要检查的键"},
				},
				ReturnType: "bool",
				Category:   "字典函数",
				Example:    `{{ hasKey $myDict "name1" }}`,
				Usage:      "hasKey 函数检查字典是否包含指定的键。如果包含返回 true，否则返回 false。",
				InsertText: `{{ hasKey . "key" }}`,
			},
			{
				Name:        "pluck",
				DisplayName: "提取值",
				Description: "从多个字典中提取指定键的所有值",
				Params: []model.SprigFunctionParam{
					{Name: "key", Type: "string", Required: true, Description: "要提取的键"},
					{Name: "dicts", Type: "...map[string]interface{}", Required: true, Description: "多个字典"},
				},
				ReturnType: "[]interface{}",
				Category:   "字典函数",
				Example:    `{{ pluck "name1" $myDict $myOtherDict }}`,
				Usage:      "pluck 函数可以指定一个键和多个字典，获取所有匹配值的列表。如果某个字典中没有找到键，该字典不会在结果列表中有项目。常见用法是 pluck... | first 从字典集合中获取第一个匹配的键。",
				InsertText: `{{ pluck "key" . $otherDict }}`,
				Note:       "常与 | first 结合使用获取第一个匹配值",
			},
			{
				Name:        "dig",
				DisplayName: "深度获取",
				Description: "遍历嵌套字典结构获取深层值",
				Params: []model.SprigFunctionParam{
					{Name: "keys", Type: "...string", Required: true, Description: "键路径"},
					{Name: "defaultValue", Type: "any", Required: true, Description: "默认值"},
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
				},
				ReturnType: "any",
				Category:   "字典函数",
				Example:    `{{ dig "user" "role" "humanName" "guest" $dict }}`,
				Usage:      "dig 函数遍历嵌套的字典集合，从值列表中选择键。如果任何键在关联字典中找不到，返回默认值。在避免保护子句时很有用，特别是Go模板包的 and 不会短路的情况下。",
				InsertText: `{{ dig "key1" "key2" "default" . }}`,
				Note:       "支持管道操作，字典参数在最后",
			},
			{
				Name:        "merge",
				DisplayName: "合并字典",
				Description: "将两个或多个字典合并为一个",
				Params: []model.SprigFunctionParam{
					{Name: "dest", Type: "map[string]interface{}", Required: true, Description: "目标字典"},
					{Name: "sources", Type: "...map[string]interface{}", Required: true, Description: "源字典"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ $newdict := merge $dest $source1 $source2 }}`,
				Usage:      "merge 函数将两个或多个字典合并为一个，优先使用目标字典的值。这是深度合并操作但不是深度复制操作。如果需要深度复制，请与 deepCopy 函数一起使用。",
				InsertText: `{{ merge . $source }}`,
				Note:       "深度合并但不深度复制，出现问题时会panic，使用 mustMerge 可获取错误",
				Aliases:    []string{"mustMerge"},
			},
			{
				Name:        "mergeOverwrite",
				DisplayName: "覆盖合并字典",
				Description: "将字典合并，从右到左优先级，有效覆盖目标字典中的值",
				Params: []model.SprigFunctionParam{
					{Name: "dest", Type: "map[string]interface{}", Required: true, Description: "目标字典"},
					{Name: "sources", Type: "...map[string]interface{}", Required: true, Description: "源字典"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ $newdict := mergeOverwrite $dest $source1 $source2 }}`,
				Usage:      "mergeOverwrite 函数将两个或多个字典合并为一个，从右到左给予优先级，有效覆盖目标字典中的值。这是深度合并操作但不是深度复制操作。",
				InsertText: `{{ mergeOverwrite . $source }}`,
				Note:       "从右到左优先级，出现问题时会panic，使用 mustMergeOverwrite 可获取错误",
				Aliases:    []string{"mustMergeOverwrite"},
			},
			{
				Name:        "keys",
				DisplayName: "获取键列表",
				Description: "返回字典中所有键的列表",
				Params: []model.SprigFunctionParam{
					{Name: "dicts", Type: "...map[string]interface{}", Required: true, Description: "一个或多个字典"},
				},
				ReturnType: "[]string",
				Category:   "字典函数",
				Example:    `{{ keys $myDict | sortAlpha }}`,
				Usage:      "keys 函数返回一个或多个字典类型中所有键的列表。由于字典是无序的，键不会按可预测的顺序排列。可以用 sortAlpha 排序。提供多个字典时，键会被连接。",
				InsertText: `{{ keys . | sortAlpha }}`,
				Note:       "字典无序，键顺序不可预测，建议配合 sortAlpha 使用",
			},
			{
				Name:        "pick",
				DisplayName: "选择键",
				Description: "从字典中选择指定的键，创建新字典",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "源字典"},
					{Name: "keys", Type: "...string", Required: true, Description: "要选择的键"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ pick $myDict "name1" "name2" }}`,
				Usage:      "pick 函数从字典中选择指定的键，创建新字典。只包含指定的键值对。",
				InsertText: `{{ pick . "key1" "key2" }}`,
			},
			{
				Name:        "omit",
				DisplayName: "排除键",
				Description: "从字典中排除指定的键，创建新字典",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "源字典"},
					{Name: "keys", Type: "...string", Required: true, Description: "要排除的键"},
				},
				ReturnType: "map[string]interface{}",
				Category:   "字典函数",
				Example:    `{{ omit $myDict "name1" }}`,
				Usage:      "omit 函数与 pick 相似，但返回一个不包含指定键的新字典。",
				InsertText: `{{ omit . "key1" "key2" }}`,
			},
			{
				Name:        "values",
				DisplayName: "获取值列表",
				Description: "返回字典中所有值的列表",
				Params: []model.SprigFunctionParam{
					{Name: "dict", Type: "map[string]interface{}", Required: true, Description: "字典"},
				},
				ReturnType: "[]interface{}",
				Category:   "字典函数",
				Example:    `{{ values $myDict }}`,
				Usage:      "values 函数与 keys 相似，但返回源字典所有值的新列表（只支持一个字典）。values 函数不保证结果顺序，如果需要排序请使用 sortAlpha。",
				InsertText: `{{ values . }}`,
				Note:       "不保证结果顺序，只支持单个字典",
			},
			{
				Name:        "deepCopy",
				DisplayName: "深度复制",
				Description: "对值进行深度复制",
				Params: []model.SprigFunctionParam{
					{Name: "value", Type: "any", Required: true, Description: "要复制的值"},
				},
				ReturnType: "any",
				Category:   "字典函数",
				Example:    `{{ deepCopy $myDict }}`,
				Usage:      "deepCopy 函数对值进行深度复制。这包括字典和其他结构。deepCopy 在出现问题时会panic，mustDeepCopy 在出现错误时向模板系统返回错误。",
				InsertText: `{{ deepCopy . }}`,
				Note:       "出现问题时会panic，使用 mustDeepCopy 可获取错误信息",
				Aliases:    []string{"mustDeepCopy"},
			},
		},
	}
}
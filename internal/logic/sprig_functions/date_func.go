package sprig_functions

import "github.com/ciclebyte/template_starter/internal/model"

// buildDateFunctions 构建日期函数分类
func (s *sSprigFunctions) buildDateFunctions() model.SprigFunctionCategory {
	return model.SprigFunctionCategory{
		Name:        "日期函数",
		Description: "日期时间处理和格式化函数",
		Functions: []model.SprigFunction{
			{
				Name:        "now",
				DisplayName: "当前时间",
				Description: "获取当前日期/时间",
				Params:      []model.SprigFunctionParam{},
				ReturnType:  "time.Time",
				Category:    "日期函数",
				Example:     `{{ now | date "2006-01-02" }}`,
				Usage:       "now 函数返回当前的日期/时间。通常与其他日期函数结合使用。",
				InsertText:  `{{ now }}`,
				Note:        "返回的是 time.Time 对象，需要格式化才能显示",
			},
			{
				Name:        "ago",
				DisplayName: "时间差",
				Description: "返回从指定时间到现在的时间差",
				Params: []model.SprigFunctionParam{
					{Name: "time", Type: "time.Time", Required: true, Description: "指定的时间对象"},
				},
				ReturnType: "time.Duration",
				Category:   "日期函数",
				Example:    `{{ ago .CreatedAt }}`,
				Usage:      "ago 函数返回从 time.Now 到指定时间的持续时长，以秒为分辨率。返回 time.Duration 的 String() 格式。",
				InsertText: `{{ ago .CreatedAt }}`,
				Note:       "返回格式如：2h34m7s",
			},
			{
				Name:        "date",
				DisplayName: "格式化日期",
				Description: "格式化日期",
				Params: []model.SprigFunctionParam{
					{Name: "format", Type: "string", Required: true, Description: "时间格式字符串"},
					{Name: "time", Type: "time.Time", Required: true, Description: "时间对象"},
				},
				ReturnType: "string",
				Category:   "日期函数",
				Example:    `{{ now | date "2006-01-02" }}`,
				Usage:      "date 函数格式化日期。Go语言的日期格式有点特殊，使用基准日期 'Mon Jan 2 15:04:05 MST 2006' 来表示格式。要获取 YEAR-MONTH-DAY 格式，使用 '2006-01-02'。",
				InsertText: `{{ date "2006-01-02" . }}`,
				Note:       "Go时间格式使用参考时间：Mon Jan 2 15:04:05 MST 2006",
			},
			{
				Name:        "dateInZone",
				DisplayName: "指定时区格式化",
				Description: "在指定时区格式化日期",
				Params: []model.SprigFunctionParam{
					{Name: "format", Type: "string", Required: true, Description: "时间格式字符串"},
					{Name: "time", Type: "time.Time", Required: true, Description: "时间对象"},
					{Name: "timezone", Type: "string", Required: true, Description: "时区名称"},
				},
				ReturnType: "string",
				Category:   "日期函数",
				Example:    `{{ dateInZone "2006-01-02" now "UTC" }}`,
				Usage:      "dateInZone 函数与 date 相同，但可以指定时区。",
				InsertText: `{{ dateInZone "2006-01-02" . "UTC" }}`,
			},
			{
				Name:        "duration",
				DisplayName: "时间间隔",
				Description: "将给定秒数格式化为 time.Duration",
				Params: []model.SprigFunctionParam{
					{Name: "seconds", Type: "int", Required: true, Description: "秒数"},
				},
				ReturnType: "time.Duration",
				Category:   "日期函数",
				Example:    `{{ duration "95" }}`,
				Usage:      "duration 函数将给定的秒数格式化为 time.Duration。例如输入 95 秒，返回 1m35s。",
				InsertText: `{{ duration "95" }}`,
				Note:       "输入秒数，输出格式化的时间间隔",
			},
			{
				Name:        "durationRound",
				DisplayName: "时间间隔舍入",
				Description: "将时间间隔舍入到最重要的单位",
				Params: []model.SprigFunctionParam{
					{Name: "duration", Type: "any", Required: true, Description: "时间间隔（字符串、time.Duration 或 time.Time）"},
				},
				ReturnType: "time.Duration",
				Category:   "日期函数",
				Example:    `{{ durationRound "2h34m7s" }}`,
				Usage:      "durationRound 函数将给定的时间间隔舍入到最重要的单位。字符串和 time.Duration 会被解析为持续时间，而 time.Time 会计算为距离现在的持续时间。例如 '2h34m7s' 返回 '2h'，'3mo2d' 返回 '3mo'。",
				InsertText: `{{ durationRound . }}`,
				Note:       "自动选择最重要的时间单位进行舍入",
			},
			{
				Name:        "unixEpoch",
				DisplayName: "Unix时间戳",
				Description: "返回 time.Time 的 Unix 纪元秒数",
				Params: []model.SprigFunctionParam{
					{Name: "time", Type: "time.Time", Required: true, Description: "时间对象"},
				},
				ReturnType: "int64",
				Category:   "日期函数",
				Example:    `{{ unixEpoch now }}`,
				Usage:      "unixEpoch 函数返回 time.Time 自 Unix 纪元以来的秒数。",
				InsertText: `{{ unixEpoch . }}`,
				Note:       "返回秒级时间戳",
			},
			{
				Name:        "dateModify",
				DisplayName: "修改日期",
				Description: "修改日期并返回时间戳",
				Params: []model.SprigFunctionParam{
					{Name: "modification", Type: "string", Required: true, Description: "修改字符串"},
					{Name: "time", Type: "time.Time", Required: true, Description: "基准时间对象"},
				},
				ReturnType: "time.Time",
				Category:   "日期函数",
				Example:    `{{ dateModify "-1h30m" now }}`,
				Usage:      "dateModify 函数接受一个修改字符串和一个日期，返回修改后的时间戳。例如从当前时间减去一小时三十分钟。如果修改格式错误，dateModify 会返回未修改的日期。",
				InsertText: `{{ dateModify "-1h30m" . }}`,
				Note:       "修改格式：+/-时间间隔，如 '-1h30m'、'+2d'",
				Aliases:    []string{"mustDateModify"},
			},
			{
				Name:        "htmlDate",
				DisplayName: "HTML日期格式",
				Description: "格式化日期用于 HTML 日期选择器输入字段",
				Params: []model.SprigFunctionParam{
					{Name: "time", Type: "time.Time", Required: true, Description: "时间对象"},
				},
				ReturnType: "string",
				Category:   "日期函数",
				Example:    `{{ htmlDate now }}`,
				Usage:      "htmlDate 函数格式化日期以便插入到 HTML 日期选择器输入字段中。",
				InsertText: `{{ htmlDate . }}`,
				Note:       "专门用于 HTML input[type=date] 字段",
			},
			{
				Name:        "htmlDateInZone",
				DisplayName: "HTML时区日期格式",
				Description: "在指定时区格式化日期用于 HTML 日期选择器",
				Params: []model.SprigFunctionParam{
					{Name: "time", Type: "time.Time", Required: true, Description: "时间对象"},
					{Name: "timezone", Type: "string", Required: true, Description: "时区名称"},
				},
				ReturnType: "string",
				Category:   "日期函数",
				Example:    `{{ htmlDateInZone now "UTC" }}`,
				Usage:      "htmlDateInZone 函数与 htmlDate 相同，但可以指定时区。",
				InsertText: `{{ htmlDateInZone . "UTC" }}`,
				Note:       "专门用于 HTML input[type=date] 字段，支持时区",
			},
			{
				Name:        "toDate",
				DisplayName: "字符串转日期",
				Description: "将字符串转换为日期",
				Params: []model.SprigFunctionParam{
					{Name: "layout", Type: "string", Required: true, Description: "日期布局格式"},
					{Name: "dateString", Type: "string", Required: true, Description: "日期字符串"},
				},
				ReturnType: "time.Time",
				Category:   "日期函数",
				Example:    `{{ toDate "2006-01-02" "2017-12-31" | date "02/01/2006" }}`,
				Usage:      "toDate 函数将字符串转换为日期。第一个参数是日期布局，第二个是日期字符串。如果字符串无法转换，返回零值。这在你想要将字符串日期转换为另一种格式时很有用（使用管道）。例如将 '2017-12-31' 转换为 '31/12/2017'。",
				InsertText: `{{ toDate "2006-01-02" . }}`,
				Note:       "转换失败时返回零值，使用 mustToDate 可获取错误信息",
				Aliases:    []string{"mustToDate"},
			},
		},
	}
}

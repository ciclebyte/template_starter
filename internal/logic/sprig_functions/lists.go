package sprig_functions

import "github.com/ciclebyte/template_starter/internal/model"

// buildListsFunctions 构建列表函数分类
func (s *sSprigFunctions) buildListsFunctions() model.SprigFunctionCategory {
	return model.SprigFunctionCategory{
		Name:        "列表函数",
		Description: "列表操作和处理函数",
		Functions: []model.SprigFunction{
			{
				Name:        "list",
				DisplayName: "创建列表",
				Description: "创建一个包含任意序列数据的列表",
				Params: []model.SprigFunctionParam{
					{Name: "items", Type: "...any", Required: false, Description: "列表元素"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ $myList := list 1 2 3 4 5 }}`,
				Usage:      "list 函数创建一个包含任意序列数据的列表。类似于数组或切片，但列表被设计为不可变数据类型。",
				InsertText: `{{ list 1 2 3 }}`,
				Note:       "在Go中实现为 []interface{}，不可变数据类型",
			},
			{
				Name:        "first",
				DisplayName: "获取首元素",
				Description: "获取列表的第一个元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要操作的列表"},
				},
				ReturnType: "any",
				Category:   "列表函数",
				Example:    `{{ first $myList }}`,
				Usage:      "first 函数获取列表的第一个元素。first $myList 返回第一个元素。",
				InsertText: `{{ first . }}`,
				Note:       "出现问题时会panic，使用 mustFirst 可获取错误信息",
				Aliases:    []string{"mustFirst"},
			},
			{
				Name:        "rest",
				DisplayName: "获取尾部列表",
				Description: "获取列表除第一个元素外的所有元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要操作的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ rest $myList }}`,
				Usage:      "rest 函数获取列表的尾部（除第一个元素外的所有元素）。rest $myList 返回除首元素外的所有元素。",
				InsertText: `{{ rest . }}`,
				Note:       "出现问题时会panic，使用 mustRest 可获取错误信息",
				Aliases:    []string{"mustRest"},
			},
			{
				Name:        "last",
				DisplayName: "获取末元素",
				Description: "获取列表的最后一个元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要操作的列表"},
				},
				ReturnType: "any",
				Category:   "列表函数",
				Example:    `{{ last $myList }}`,
				Usage:      "last 函数获取列表的最后一个元素。大致相当于反转列表然后调用 first。",
				InsertText: `{{ last . }}`,
				Note:       "出现问题时会panic，使用 mustLast 可获取错误信息",
				Aliases:    []string{"mustLast"},
			},
			{
				Name:        "initial",
				DisplayName: "获取初始列表",
				Description: "获取列表除最后一个元素外的所有元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要操作的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ initial $myList }}`,
				Usage:      "initial 函数与 last 互补，返回除最后一个元素外的所有元素。initial $myList 返回除末元素外的所有元素。",
				InsertText: `{{ initial . }}`,
				Note:       "出现问题时会panic，使用 mustInitial 可获取错误信息",
				Aliases:    []string{"mustInitial"},
			},
			{
				Name:        "append",
				DisplayName: "追加元素",
				Description: "在现有列表末尾追加新元素，创建新列表",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "原列表"},
					{Name: "item", Type: "any", Required: true, Description: "要追加的元素"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ $new := append $myList 6 }}`,
				Usage:      "append 函数在现有列表末尾追加新元素，创建新列表。原列表保持不变。",
				InsertText: `{{ append . "newItem" }}`,
				Note:       "创建新列表，原列表不变。出现问题时会panic，使用 mustAppend 可获取错误信息",
				Aliases:    []string{"mustAppend"},
			},
			{
				Name:        "prepend",
				DisplayName: "前置元素",
				Description: "在列表开头添加元素，创建新列表",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "原列表"},
					{Name: "item", Type: "any", Required: true, Description: "要前置的元素"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ prepend $myList 0 }}`,
				Usage:      "prepend 函数在列表开头添加元素，创建新列表。原列表保持不变。",
				InsertText: `{{ prepend . "newItem" }}`,
				Note:       "创建新列表，原列表不变。出现问题时会panic，使用 mustPrepend 可获取错误信息",
				Aliases:    []string{"mustPrepend"},
			},
			{
				Name:        "concat",
				DisplayName: "连接列表",
				Description: "将任意数量的列表连接成一个列表",
				Params: []model.SprigFunctionParam{
					{Name: "lists", Type: "...[]interface{}", Required: true, Description: "要连接的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ concat $myList (list 6 7) (list 8) }}`,
				Usage:      "concat 函数将任意数量的列表连接成一个列表。原列表保持不变。",
				InsertText: `{{ concat . (list "item1") }}`,
			},
			{
				Name:        "reverse",
				DisplayName: "反转列表",
				Description: "生成给定列表元素反转后的新列表",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要反转的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ reverse $myList }}`,
				Usage:      "reverse 函数生成给定列表元素反转后的新列表。原列表保持不变。",
				InsertText: `{{ reverse . }}`,
				Note:       "出现问题时会panic，使用 mustReverse 可获取错误信息",
				Aliases:    []string{"mustReverse"},
			},
			{
				Name:        "uniq",
				DisplayName: "去重",
				Description: "生成去除所有重复元素的列表",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要去重的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ uniq (list 1 1 2 2) }}`,
				Usage:      "uniq 函数生成去除所有重复元素的列表。例如 uniq (list 1 1 2 2) 产生 [1 2]。",
				InsertText: `{{ uniq . }}`,
				Note:       "出现问题时会panic，使用 mustUniq 可获取错误信息",
				Aliases:    []string{"mustUniq"},
			},
			{
				Name:        "without",
				DisplayName: "过滤元素",
				Description: "从列表中过滤掉指定元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "原列表"},
					{Name: "items", Type: "...any", Required: true, Description: "要过滤掉的元素"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ without $myList 3 }}`,
				Usage:      "without 函数从列表中过滤掉指定元素。可以接受多个过滤值。",
				InsertText: `{{ without . "item1" "item2" }}`,
				Note:       "可以过滤多个元素。出现问题时会panic，使用 mustWithout 可获取错误信息",
				Aliases:    []string{"mustWithout"},
			},
			{
				Name:        "has",
				DisplayName: "包含检查",
				Description: "测试列表是否包含特定元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要检查的列表"},
					{Name: "item", Type: "any", Required: true, Description: "要查找的元素"},
				},
				ReturnType: "bool",
				Category:   "列表函数",
				Example:    `{{ has $myList 3 }}`,
				Usage:      "has 函数测试列表是否包含特定元素。如果包含返回 true，否则返回 false。",
				InsertText: `{{ has . "item" }}`,
				Note:       "出现问题时会panic，使用 mustHas 可获取错误信息",
				Aliases:    []string{"mustHas"},
			},
			{
				Name:        "compact",
				DisplayName: "压缩列表",
				Description: "接受列表并移除空值条目",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要压缩的列表"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ compact $myList }}`,
				Usage:      "compact 函数接受列表并移除空值条目。将返回移除空值（即\"\"）项目后的新列表。",
				InsertText: `{{ compact . }}`,
				Note:       "出现问题时会panic，使用 mustCompact 可获取错误信息",
				Aliases:    []string{"mustCompact"},
			},
			{
				Name:        "slice",
				DisplayName: "切片",
				Description: "获取列表的部分元素",
				Params: []model.SprigFunctionParam{
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要切片的列表"},
					{Name: "start", Type: "int", Required: false, Description: "开始索引"},
					{Name: "end", Type: "int", Required: false, Description: "结束索引"},
				},
				ReturnType: "[]interface{}",
				Category:   "列表函数",
				Example:    `{{ slice $myList 1 3 }}`,
				Usage:      "slice 函数获取列表的部分元素，等同于 list[n:m]。slice $myList 返回完整列表；slice $myList 3 返回从索引3开始的元素；slice $myList 1 3 返回索引1到3的元素。",
				InsertText: `{{ slice . 0 3 }}`,
				Note:       "出现问题时会panic，使用 mustSlice 可获取错误信息",
				Aliases:    []string{"mustSlice"},
			},
			{
				Name:        "chunk",
				DisplayName: "分块",
				Description: "将列表分割成指定大小的块",
				Params: []model.SprigFunctionParam{
					{Name: "size", Type: "int", Required: true, Description: "块大小"},
					{Name: "list", Type: "[]interface{}", Required: true, Description: "要分块的列表"},
				},
				ReturnType: "[][]interface{}",
				Category:   "列表函数",
				Example:    `{{ chunk 3 $myList }}`,
				Usage:      "chunk 函数将列表分割成指定大小的块。这对于分页很有用。生成列表的列表，每个子列表包含指定数量的元素。",
				InsertText: `{{ chunk 3 . }}`,
				Note:       "用于分页，生成二维列表",
			},
		},
	}
}
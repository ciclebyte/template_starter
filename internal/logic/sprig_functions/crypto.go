package sprig_functions

import "github.com/ciclebyte/template_starter/internal/model"

// buildCryptoFunctions 构建加密和安全函数分类
func (s *sSprigFunctions) buildCryptoFunctions() model.SprigFunctionCategory {
	return model.SprigFunctionCategory{
		Name:        "加密和安全函数",
		Description: "密码学和安全相关函数",
		Functions: []model.SprigFunction{
			{
				Name:        "sha1sum",
				DisplayName: "SHA1摘要",
				Description: "计算字符串的SHA1摘要",
				Params: []model.SprigFunctionParam{
					{Name: "string", Type: "string", Required: true, Description: "要计算摘要的字符串"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ sha1sum "Hello world!" }}`,
				Usage:      "sha1sum 函数接收一个字符串，计算其SHA1摘要。返回ASCII格式的摘要值，可安全打印。",
				InsertText: `{{ sha1sum . }}`,
				Note:       "SHA1算法已被认为不够安全，建议使用SHA256或更强的算法",
			},
			{
				Name:        "sha256sum",
				DisplayName: "SHA256摘要",
				Description: "计算字符串的SHA256摘要",
				Params: []model.SprigFunctionParam{
					{Name: "string", Type: "string", Required: true, Description: "要计算摘要的字符串"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ sha256sum "Hello world!" }}`,
				Usage:      "sha256sum 函数接收一个字符串，计算其SHA256摘要。以ASCII格式返回SHA256摘要值，可安全打印。",
				InsertText: `{{ sha256sum . }}`,
				Note:       "推荐的安全哈希算法",
			},
			{
				Name:        "sha512sum",
				DisplayName: "SHA512摘要",
				Description: "计算字符串的SHA512摘要",
				Params: []model.SprigFunctionParam{
					{Name: "string", Type: "string", Required: true, Description: "要计算摘要的字符串"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ sha512sum "Hello world!" }}`,
				Usage:      "sha512sum 函数接收一个字符串，计算其SHA512摘要。以ASCII格式返回SHA512摘要值，可安全打印。",
				InsertText: `{{ sha512sum . }}`,
				Note:       "更强的哈希算法，适用于高安全要求场景",
			},
			{
				Name:        "adler32sum",
				DisplayName: "Adler-32校验和",
				Description: "计算字符串的Adler-32校验和",
				Params: []model.SprigFunctionParam{
					{Name: "string", Type: "string", Required: true, Description: "要计算校验和的字符串"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ adler32sum "Hello world!" }}`,
				Usage:      "adler32sum 函数接收一个字符串，计算其Adler-32校验和。主要用于数据完整性检查。",
				InsertText: `{{ adler32sum . }}`,
				Note:       "快速校验和算法，但不适用于安全用途",
			},
			{
				Name:        "bcrypt",
				DisplayName: "bcrypt哈希",
				Description: "生成字符串的bcrypt哈希",
				Params: []model.SprigFunctionParam{
					{Name: "password", Type: "string", Required: true, Description: "要哈希的密码"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ bcrypt "myPassword" }}`,
				Usage:      "bcrypt 函数接收一个字符串，生成其bcrypt哈希值。bcrypt是密码哈希的推荐算法，具有自适应性和抗彩虹表攻击能力。",
				InsertText: `{{ bcrypt . }}`,
				Note:       "推荐的密码哈希算法，直接在模板中存储密码是不安全的",
			},
			{
				Name:        "htpasswd",
				DisplayName: "htpasswd哈希",
				Description: "生成Apache HTTP Server的基本认证哈希",
				Params: []model.SprigFunctionParam{
					{Name: "username", Type: "string", Required: true, Description: "用户名"},
					{Name: "password", Type: "string", Required: true, Description: "密码"},
					{Name: "hashAlgorithm", Type: "string", Required: false, Description: "哈希算法（bcrypt或sha，默认bcrypt）"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ htpasswd "myUser" "myPassword" "bcrypt" }}`,
				Usage:      "htpasswd 函数接受用户名、密码和哈希算法（可选），生成bcrypt（推荐）或base64编码的sha哈希。结果可用于Apache HTTP Server的基本认证。",
				InsertText: `{{ htpasswd "user" "pass" "bcrypt" }}`,
				Note:       "⚠️ 直接在模板中存储密码是不安全的",
			},
			{
				Name:        "randBytes",
				DisplayName: "随机字节",
				Description: "生成密码学安全的随机字节序列",
				Params: []model.SprigFunctionParam{
					{Name: "count", Type: "int", Required: true, Description: "字节数量"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ randBytes 24 }}`,
				Usage:      "randBytes 函数接受计数N，生成密码学安全的N个随机字节序列（使用crypto/rand）。序列以base64编码字符串返回。",
				InsertText: `{{ randBytes 32 }}`,
				Note:       "使用密码学安全的随机数生成器",
			},
			{
				Name:        "derivePassword",
				DisplayName: "派生密码",
				Description: "基于主密码和约束条件派生特定密码",
				Params: []model.SprigFunctionParam{
					{Name: "counter", Type: "int", Required: true, Description: "计数器"},
					{Name: "passwordType", Type: "string", Required: true, Description: "密码类型"},
					{Name: "password", Type: "string", Required: true, Description: "主密码"},
					{Name: "user", Type: "string", Required: true, Description: "用户名"},
					{Name: "site", Type: "string", Required: true, Description: "站点名"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ derivePassword 1 "long" "password" "user" "example.com" }}`,
				Usage:      "derivePassword 函数可用于基于共享的主密码约束条件派生特定密码。算法有详细规范。允许生成站点特定的强密码。",
				InsertText: `{{ derivePassword 1 "long" . "user" "site" }}`,
				Note:       "⚠️ 直接在模板中存储各部分被认为是不安全的",
			},
			{
				Name:        "genPrivateKey",
				DisplayName: "生成私钥",
				Description: "生成新的私钥并编码为PEM块",
				Params: []model.SprigFunctionParam{
					{Name: "keyType", Type: "string", Required: true, Description: "密钥类型（ecdsa、dsa、rsa、ed25519）"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ genPrivateKey "rsa" }}`,
				Usage:      "genPrivateKey 函数生成新的私钥并编码为PEM块。支持ecdsa（椭圆曲线P256）、dsa（L2048N256）、rsa（4096位）、ed25519密钥类型。",
				InsertText: `{{ genPrivateKey "rsa" }}`,
				Note:       "支持多种现代密钥算法",
			},
			{
				Name:        "genCA",
				DisplayName: "生成CA证书",
				Description: "生成新的自签名x509证书颁发机构",
				Params: []model.SprigFunctionParam{
					{Name: "cn", Type: "string", Required: true, Description: "通用名称"},
					{Name: "days", Type: "int", Required: true, Description: "证书有效期（天）"},
				},
				ReturnType: "object",
				Category:   "加密和安全函数",
				Example:    `{{ $ca := genCA "foo-ca" 365 }}`,
				Usage:      "genCA 函数使用2048位RSA私钥生成新的自签名x509证书颁发机构。返回包含Cert（PEM编码证书）和Key（PEM编码私钥）的对象。",
				InsertText: `{{ $ca := genCA "my-ca" 365 }}`,
				Note:       "返回的对象可传递给genSignedCert函数签名证书",
			},
			{
				Name:        "genSelfSignedCert",
				DisplayName: "生成自签名证书",
				Description: "生成新的自签名x509证书",
				Params: []model.SprigFunctionParam{
					{Name: "cn", Type: "string", Required: true, Description: "通用名称"},
					{Name: "ips", Type: "[]string", Required: false, Description: "IP地址列表（可选）"},
					{Name: "altNames", Type: "[]string", Required: false, Description: "备用DNS名称列表（可选）"},
					{Name: "days", Type: "int", Required: true, Description: "证书有效期（天）"},
				},
				ReturnType: "object",
				Category:   "加密和安全函数",
				Example:    `{{ $cert := genSelfSignedCert "foo.com" (list "10.0.0.1") (list "bar.com") 365 }}`,
				Usage:      "genSelfSignedCert 函数使用2048位RSA私钥生成新的自签名x509证书。支持指定IP地址和备用DNS名称。",
				InsertText: `{{ $cert := genSelfSignedCert "example.com" nil nil 365 }}`,
				Note:       "返回包含Cert和Key属性的对象",
			},
			{
				Name:        "encryptAES",
				DisplayName: "AES加密",
				Description: "使用AES-256 CBC加密文本",
				Params: []model.SprigFunctionParam{
					{Name: "password", Type: "string", Required: true, Description: "加密密码"},
					{Name: "plaintext", Type: "string", Required: true, Description: "明文"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ encryptAES "password" "plaintext" }}`,
				Usage:      "encryptAES 函数使用AES-256 CBC算法加密文本，返回base64编码的字符串。",
				InsertText: `{{ encryptAES "key" . }}`,
				Note:       "使用强加密算法，返回base64编码结果",
			},
			{
				Name:        "decryptAES",
				DisplayName: "AES解密",
				Description: "解密AES-256 CBC加密的base64字符串",
				Params: []model.SprigFunctionParam{
					{Name: "password", Type: "string", Required: true, Description: "解密密码"},
					{Name: "ciphertext", Type: "string", Required: true, Description: "base64编码的密文"},
				},
				ReturnType: "string",
				Category:   "加密和安全函数",
				Example:    `{{ decryptAES "password" "encryptedData" }}`,
				Usage:      "decryptAES 函数接收由AES-256 CBC算法编码的base64字符串，返回解密后的文本。",
				InsertText: `{{ decryptAES "key" . }}`,
				Note:       "与encryptAES配对使用",
			},
		},
	}
}